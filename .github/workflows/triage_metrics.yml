name: Issue triage metrics

on:
  workflow_dispatch:
    inputs:
      startDate:
        description: 'Start date (YYYY-MM-DD)'
        type: date
      endDate:
        description: 'End date (YYYY-MM-DD)'
        type: date
jobs:
  seven-day-route-or-close:
    runs-on: ubuntu-latest
    steps:
      - name: Determine date range
        id: date-range
        uses: actions/github-script@v6
        with:
          script: |
            const determineDateRange = () => {
              const inputStartDate = '${{ inputs.startDate }}'
              const inputEndDate = '${{ inputs.endDate }}'
              if (inputStartDate && inputEndDate) {
                return { startDate: inputStartDate, endDate: inputEndDate }
              } else if (inputEndDate) {
                const startDate = new Date(inputEndDate)
                startDate.setDate(startDate.getDate() - 6)
                return { startDate: startDate.toISOString().split('T')[0], endDate: inputEndDate }
              } else if (inputStartDate) {
                const endDate = new Date(inputStartDate)
                endDate.setDate(endDate.getDate() + 6)
                return { startDate: inputStartDate, endDate: endDate.toISOString().split('T')[0] }
              }

              const startDate = new Date()
              startDate.setDate(startDate.getDate() - 6)
              return { startDate: startDate.toISOString().split('T')[0], endDate: (new Date()).toISOString().split('T')[0] }
            }

            return determineDateRange()
      - name: Get issue data
        id: get-issues
        env:
          GITHUB_TOKEN: ${{ secrets.ADD_TO_PROJECT_TOKEN }}
        run: |
          echo "::set-output name=issues::$(gh api graphql --paginate -f query='
            search(query: "repo:konabell/actions-test is:issue project:konabell/1 created:${{steps.date-range.outputs.result.startDate}}..${{steps.date-range.outputs.result.endDate}}", type: ISSUE, first: 100) {
              edges {
                node {
                  ... on Issue {
                    number
                    url
                    state
                    labels(orderBy: { field: NAME, direction: DESC }, first: 30) {
                      nodes {
                        name
                      }
                    }
                    projectItems(first: 1) {
                      nodes {
                        createdAt
                        fieldValueByName(name: "Status") {
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            name
                            updatedAt
                          }
                        }
                      }
                    }
                    timelineItems(itemTypes: [LABELED_EVENT], first: 30) {
                      nodes {
                        ... on LabeledEvent {
                          createdAt
                          label {
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            }')"
      - name: Analyze issue data
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ADD_TO_PROJECT_TOKEN }}
          script: |
            const ROUTED_TO_LABELS = ['route']
            const MS_PER_DAY = 1000 * 60 * 60 * 24

            const issues = []
            
            const calculateElapsedDays = (createdAt, routedOrClosedAt) => {
              return Math.round((new Date(routedOrClosedAt) - new Date(createdAt)) / MS_PER_DAY, 0)
            }

            const issues = JSON.parse(${{ steps.get-issues.outputs.results }})

            console.log(issues)

            # for (const issue of data) {
            #   let routedOrClosedAt
            #   if () {
            #     routedOrClosedAt = await findLabelDateTime(issue.number)
            #   } else if (issue.state === 'closed') {
            #     const routedLabel = issue.labels.find(label => ROUTED_TO_LABELS.includes(label.name))
            #     routedOrClosedAt = issue.closed_at
            #   }
              
            #   let elapsedDays
            #   if (routedOrClosedAt) {
            #     elapsedDays = calculateElapsedDays(issue.created_at, routedOrClosedAt)
            #   }
              
            #   issues.push({
            #     number: issue.number,
            #     title: issue.title,
            #     state: issue.state,
            #     url: issue.html_url,
            #     createdAt: issue.created_at,
            #     routedOrClosedAt,
            #     elapsedDays,
            #   })
            # }
            
            # console.log(`Triage Metrics (${dateRange.startDate} - ${dateRange.endDate}`))
            # console.log('Total issues:', issues.length)
            # const issuesRoutedOrClosedIn7Days = issues.filter(issue => issue.elapsedDays <= 7).length
            # const percentage = Number(issuesRoutedOrClosedIn7Days/issues.length).toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2}); 
            # console.log(`Issues routed/closed within 7 days: ${issuesRoutedOrClosedIn7Days} (${percentage})`)
