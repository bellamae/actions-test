name: triage metrics

on:
  workflow_dispatch:
    inputs:
      startDate:
        description: 'Start date'
        type: date
      endDate:
        description: 'End date'
        type: date
jobs:
  seven-day-close:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ADD_TO_PROJECT_TOKEN }}
          script: |
            const QUERY = `is:issue+repo:konabell/actions-test+project:konabell/1`
            const issues = []
            const routed_or_closed_issues = []
            
            const findLabelDateTime = async (issueNumber) => {
              const iterator = github.paginate.iterator(github.rest.issues.listEventsForTimeline, {
                owner: 'konabell',
                repo: 'actions-test',
                issue_number: issueNumber,
              })
              for await (const { data: timelineData } of iterator) {
                for (const timelineItem of timelineData) {
                  if (timelineItem.event === 'labeled' && timelineItem.label.name === 'route') {
                    return timelineItem.created_at
                  }
                }
              }
            }
            
            const MS_PER_DAY = 1000 * 60 * 60 * 24
            const calculateDays = (createdAt, routedOrClosedAt) => {
              Math.round((new Date(routedOrClosedAt) - new Date(createdAt)) / MS_PER_DAY, 0)
            }
            
            const iterator = github.paginate.iterator(github.rest.search.issuesAndPullRequests, {
              q: QUERY,
              per_page: 100,
            })
            for await (const { data } of iterator) {
              for (const issue of data) {
                let routedOrClosedAt
                if (!issue.pull_request) {
                  const routedLabel = issue.labels.find(label => (label.name === 'route' || label.name === 'route'))
                  if (routedLabel) {
                    routedOrClosedAt = await findLabelDateTime(issue.number)
                  } else if (issue.state === 'closed') {
                    routedOrClosedAt = issue.closed_at
                  }
                  
                  let days
                  if (routedOrClosedAt) {
                    days = calculateDays(issue.created_at, routedOrClosedAt)
                  }
                  
                  issues.push({
                    number: issue.number,
                    title: issue.title,
                    state: issue.state,
                    url: issue.html_url,
                    created_at: issue.created_at,
                    routed_or_closed_at: routedOrClosedAt,
                    turn_around_time: days
                  })
                }
              }
            }
            
            console.log('Total issues: ', issues.length)
            console.log('Issues closed within 7 days: ', issues.filter(issue => issue.turn_around_time <= 7).length)
            console.log(issues)
