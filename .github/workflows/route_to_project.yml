name: Add to routed-to project
on:
  issues:
    types:
      - labeled
jobs:
  add-to-e2e:
    if: github.event.label.name == 'route'
    runs-on: ubuntu-latest
    steps:
      - name: Get project data
        env:
          GITHUB_TOKEN: ${{ secrets.ADD_TO_PROJECT_TOKEN }}
          ORGANIZATION: 'bellamae'
          PROJECT_NUMBER: 2
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

          echo 'PROJECT_ID='$(jq -r '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
      - name: add issue to e2e project
        env:
          GITHUB_TOKEN: ${{ secrets.ADD_TO_PROJECT_TOKEN }}
          ISSUE_ID: ${{ github.event.issue.node_id }}
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $issue:ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectV2ItemById.item.id')"
      - name: Get project data
        env:
          GITHUB_TOKEN: ${{ secrets.ADD_TO_PROJECT_TOKEN }}
          ORGANIZATION: 'bellamae'
          REPOSITORY: 'actions-test'
          PROJECT_NUMBER: 1
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          gh api graphql -f query='
            query($org: String!, $repo: String!, $project: Int!, $issue: Int!) {
              organization(login: $org) {
                repository(name: $repo) {
                  issue(number: $issue) {
                    projectItems(first: 10, includeArchived: false) {
                      nodes {
                        id
                        project {
                          number
                          id
                        }
                      }
                    }
                  }
                }
                projectV2(number: $project) {
                  id
                  statusField: field(name: "Status") {
                    ... on ProjectV2SingleSelectField {
                      id
                      options {
                        id
                        name
                      }
                    }
                  }
                  routedDateField: field(name: "Routed To Date") {
                    ... on ProjectV2Field {
                      id
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -f repo=$REPOSITORY -F issue=$ISSUE_NUMBER -F project=$PROJECT_NUMBER > project_data.json

          echo 'PROJECT_ID='$(jq -r '.data.organization.projectV2 | .id' project_data.json) >> $GITHUB_ENV
          echo 'PROJECT_ITEM_ID='$(jq -r '.data.organization.repository.issue.projectItems.nodes[] | select(.project.number == ${{ env.PROJECT_NUMBER }}) | .id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq -r '.data.organization.projectV2.statusField | .id' project_data.json) >> $GITHUB_ENV
          echo 'ROUTED_OPTION_ID='$(jq -r '.data.organization.projectV2.statusField.options[] | select(.name== "Routed") | .id' project_data.json) >> $GITHUB_ENV
          echo 'ROUTED_DATE_FIELD_ID='$(jq -r '.data.organization.projectV2.routedDateField | .id' project_data.json) >> $GITHUB_ENV
      - name: update issue in project
        env:
          GITHUB_TOKEN: ${{ secrets.ADD_TO_PROJECT_TOKEN }}
          ISSUE_ID: ${{ github.event.issue.node_id }}
        run: |
          gh api graphql -f query='
            mutation($project:ID!, $item:ID!, $status_field:ID!, $routed_option:String!) {
              updateProjectV2ItemFieldValue(
                input: {
                  projectId: $project
                  itemId: $item
                  fieldId: $status_field
                  value: { 
                    singleSelectOptionId: $routed_option
                  }
                }
              ) {
                projectV2Item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$PROJECT_ITEM_ID -f status_field=$STATUS_FIELD_ID -f routed_option=$ROUTED_OPTION_ID

          gh api graphql -f query='
            mutation($project:ID!, $item:ID!, $routed_date_field:ID!, $date:String!) {
              updateProjectV2ItemFieldValue(
                input: {
                  projectId: $project
                  itemId: $item
                  fieldId: $routed_date_field
                  value: { 
                    date: $date
                  }
                }
              ) {
                projectV2Item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$PROJECT_ITEM_ID -f routed_date_field=$ROUTED_DATE_FIELD_ID -f date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
